version: "3.7"

services:

    # ===== Primary Services =====
    # PHP Service
    php:
        container_name: ${PROJECT_NAME}_php
        build:
            args:
                user: laravel
                uid: 1000
            context: ./
            dockerfile: Dockerfile
        image: ${PROJECT_NAME}_php
        restart: always
        working_dir: /var/www/
        volumes:
            - ./:/var/www
            - ./.docker/php/local.ini:/etc/php.d/local.ini
        networks:
            - app-network

    # Nginx Service
    nginx:
        container_name: ${PROJECT_NAME}_nginx
        image: nginx:1.21.6-alpine
        restart: always
        ports:
            - ${NGINX_HTTP_PORT}:80
        volumes:
            - ./:/var/www
            - ./.docker/nginx/:/etc/nginx/conf.d/
        depends_on:
            - php
            - mysql
            - redis
            - meilisearch
        networks:
            - app-network

    # MySQL Service
    mysql:
        container_name: ${PROJECT_NAME}_mysql
        image: mysql:8
        restart: always
        environment:
            MYSQL_DATABASE: ${DB_DATABASE}
            MYSQL_ROOT_PASSWORD: ${DB_PASSWORD_ROOT}
            MYSQL_PASSWORD: ${DB_PASSWORD}
            MYSQL_USER: ${DB_USERNAME}
        volumes:
            - mysql-data:/var/lib/mysql
        ports:
            - ${MYSQL_PORT}:3306
        networks:
            - app-network

    # Redis Service
    redis:
        container_name: ${PROJECT_NAME}_redis
        image: redis:7.0.2-alpine
        restart: always
        command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
        volumes:
            - redis-data:/data
            - ./.docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
        networks:
            - app-network

    # Meilisearch Service
    meilisearch:
        container_name: ${PROJECT_NAME}_meilisearch
        image: getmeili/meilisearch:v0.27.2
        restart: always
        ports:
            - ${MEILISEARCH_PORT}:7700
        environment:
            MEILI_MASTER_KEY: ${MEILISEARCH_KEY}
        volumes:
            - meili-data:/meili_data
        networks:
            - app-network

    # Mailhog Service
    mailhog:
        container_name: ${PROJECT_NAME}_mailhog
        image: mailhog/mailhog:v1.0.1
        restart: always
        ports:
            - ${MAILHOG_PORT}:1025
            - ${MAILHOG_PORT_WEB}:8025
        networks:
            - app-network

    # ===== On-demand Services =====
    # Node Service
    npm:
        container_name: ${PROJECT_NAME}_npm
        image: node:16
        working_dir: /var/www/
        entrypoint: ['npm']
        user: node
        environment:
            NPM_CONFIG_LOGLEVEL: warn
        volumes:
            - ./:/var/www
            - ./.npmrc:/var/www/.npmrc
        networks:
            - app-network

    # Composer Service
    composer:
        container_name: ${PROJECT_NAME}_composer
        image: ${PROJECT_NAME}_php
        working_dir: /var/www/
        entrypoint: ['composer']
        volumes:
            - ./:/var/www
        networks:
            - app-network

    # Artisan Service
    artisan:
        container_name: ${PROJECT_NAME}_artisan
        image: ${PROJECT_NAME}_php
        working_dir: /var/www/
        entrypoint: ['php', 'artisan']
        volumes:
            - ./:/var/www
        depends_on:
            - mysql
            - redis
        networks:
            - app-network

    # ===== Worker Services =====
    # Npm Watch Service
    npm-watch:
        container_name: ${PROJECT_NAME}_npm-watch
        image: node:16
        restart: unless-stopped
        working_dir: /var/www/
        entrypoint: ['npm', 'run', 'watch']
        user: node
        environment:
            NPM_CONFIG_LOGLEVEL: warn
        volumes:
            - ./:/var/www
            - ./.npmrc:/var/www/.npmrc
        networks:
            - app-network

    # Horizon Redis Queues Service
    horizon:
        container_name: ${PROJECT_NAME}_horizon
        image: ${PROJECT_NAME}_php
        restart: unless-stopped
        working_dir: /var/www/
        entrypoint: ['php', 'artisan', 'horizon']
        volumes:
            - ./:/var/www
        depends_on:
            - redis
        networks:
            - app-network

    # Schedule Service
    schedule:
        container_name: ${PROJECT_NAME}_schedule
        image: ${PROJECT_NAME}_php
        restart: unless-stopped
        working_dir: /var/www/
        entrypoint: ['php', 'artisan', 'schedule:work']
        volumes:
            - ./:/var/www
        networks:
            - app-network

    # ===== Web Interface Services =====
    # RedisInsight Service
    redisinsight:
        container_name: ${PROJECT_NAME}_redisinsight
        image: redislabs/redisinsight:latest
        restart: unless-stopped
        ports:
            - ${REDIS_INSIGHT_PORT}:8001
        volumes:
            - redisinsight-data:/db
        depends_on:
            - redis
        networks:
            - app-network

    # Redis Commander Service
    redis-commander:
        container_name: ${PROJECT_NAME}_redis-commander
        image: rediscommander/redis-commander:latest
        restart: unless-stopped
        ports:
            - ${REDIS_COMMANDER_PORT}:8081
        environment:
            - |
              REDIS_HOSTS=
              default:${REDIS_HOST}:${REDIS_PORT}:0:${REDIS_PASSWORD},
              cache:${REDIS_HOST}:${REDIS_PORT}:1:${REDIS_PASSWORD},
              session:${REDIS_HOST}:${REDIS_PORT}:2:${REDIS_PASSWORD},
              queue:${REDIS_HOST}:${REDIS_PORT}:3:${REDIS_PASSWORD}
        depends_on:
            - redis
        networks:
            - app-network

    # CloudBeaver Service
    cloudbeaver:
        container_name: ${PROJECT_NAME}_cloudbeaver
        image: dbeaver/cloudbeaver:latest
        restart: unless-stopped
        ports:
            - ${CLOUDBEAVER_PORT}:8978
        volumes:
            - cloudbeaver-data:/opt/cloudbeaver/workspace
        depends_on:
            - mysql
        networks:
            - app-network

    # DBGate Service
    dbgate:
        container_name: ${PROJECT_NAME}_dbgate
        image: dbgate/dbgate:latest
        restart: unless-stopped
        ports:
            - ${DBGATE_PORT}:3000
        volumes:
            - dbgate-data:/root/.dbgate
        environment:
            LOGINS: ${DBGATE_USERNAME}
            LOGIN_PASSWORD_admin: ${DBGATE_PASSWORD}

            CONNECTIONS: con1,con2

            LABEL_con1: MySQL
            SERVER_con1: ${DB_HOST}
            USER_con1: ${DB_USERNAME}
            PASSWORD_con1: ${DB_PASSWORD}
            PORT_con1: ${DB_PORT}
            ENGINE_con1: mysql@dbgate-plugin-mysql

            LABEL_con2: Redis
            SERVER_con2: ${REDIS_HOST}
            USER_con2: ${REDIS_USERNAME}
            PASSWORD_con2: ${REDIS_PASSWORD}
            PORT_con2: ${REDIS_PORT}
            ENGINE_con2: redis@dbgate-plugin-redis
        depends_on:
            - mysql
            - redis
        networks:
            - app-network

networks:
    app-network:
        driver: bridge

volumes:
    mysql-data:
        driver: local
    redis-data:
        driver: local
    redisinsight-data:
        driver: local
    cloudbeaver-data:
        driver: local
    dbgate-data:
        driver: local
    meili-data:
        driver: local
